// Generated by view binder compiler. Do not edit!
package com.app.smart.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.app.smart.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAddContactBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialButton btnPickContact;

  @NonNull
  public final TextInputEditText etName;

  @NonNull
  public final TextInputEditText etPhone;

  @NonNull
  public final TextInputEditText etRelationship;

  @NonNull
  public final TextInputLayout tilName;

  @NonNull
  public final TextInputLayout tilPhone;

  @NonNull
  public final TextInputLayout tilRelationship;

  private DialogAddContactBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialButton btnPickContact, @NonNull TextInputEditText etName,
      @NonNull TextInputEditText etPhone, @NonNull TextInputEditText etRelationship,
      @NonNull TextInputLayout tilName, @NonNull TextInputLayout tilPhone,
      @NonNull TextInputLayout tilRelationship) {
    this.rootView = rootView;
    this.btnPickContact = btnPickContact;
    this.etName = etName;
    this.etPhone = etPhone;
    this.etRelationship = etRelationship;
    this.tilName = tilName;
    this.tilPhone = tilPhone;
    this.tilRelationship = tilRelationship;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAddContactBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAddContactBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_add_contact, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAddContactBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnPickContact;
      MaterialButton btnPickContact = ViewBindings.findChildViewById(rootView, id);
      if (btnPickContact == null) {
        break missingId;
      }

      id = R.id.etName;
      TextInputEditText etName = ViewBindings.findChildViewById(rootView, id);
      if (etName == null) {
        break missingId;
      }

      id = R.id.etPhone;
      TextInputEditText etPhone = ViewBindings.findChildViewById(rootView, id);
      if (etPhone == null) {
        break missingId;
      }

      id = R.id.etRelationship;
      TextInputEditText etRelationship = ViewBindings.findChildViewById(rootView, id);
      if (etRelationship == null) {
        break missingId;
      }

      id = R.id.tilName;
      TextInputLayout tilName = ViewBindings.findChildViewById(rootView, id);
      if (tilName == null) {
        break missingId;
      }

      id = R.id.tilPhone;
      TextInputLayout tilPhone = ViewBindings.findChildViewById(rootView, id);
      if (tilPhone == null) {
        break missingId;
      }

      id = R.id.tilRelationship;
      TextInputLayout tilRelationship = ViewBindings.findChildViewById(rootView, id);
      if (tilRelationship == null) {
        break missingId;
      }

      return new DialogAddContactBinding((LinearLayout) rootView, btnPickContact, etName, etPhone,
          etRelationship, tilName, tilPhone, tilRelationship);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
